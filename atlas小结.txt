2. 各个业务bundle可以根据业务需求修改更新各自bundle的代码。然后再通过修改app/build.gradle中的version = getEnvValue("versionName", "1.0.0");来修改版本号，版本号默认为1.0.0。
3. 然后再在app目录下面执行`../gradlew clean assembleDebug publish`命令从而进行APK打包，生成的APK文件目录是app/build/outputs/apk/app-debug.apk，上述命令也会将该目录下的ap文件发布到仓库以便于后续生成patch。
4. 如果有手机连接在pc上可以直接使用adb install安装上述APK，在app目录下执行`adb install app/build/outputs/apk/app-debug.apk`。

## 问题2：如何在用户无感知的情况下，实现所有业务模块的独立动态更新？

### 动态部署（patch）构建步骤：

1. 各个业务bundle可以根据业务需求修改更新各自bundle的代码。

2. app工程目录下执行`../gradlew clean assembleDebug -DapVersion=apVersion -DversionName=newVersion`, 其中apVersion为之前打的完整APK的版本，newVersion为此次动态部署要生成的新的版本号。
这里举一个简单的例子，例如“主APK构建”步骤的APK版本是1.0.0，然后我简单更新firstbundle的string.xml里面的hello_blank_fragment属性为“this is fragment of firstBundle”，然后执行`../gradlew clean assembleDebug -DapVersion=1.0.0 -DversionName=1.0.1`。
<img src="./img/_firstbundlepatch.png" width="100%"  alt=" MainActivity.png"/>

3. 检查build/output/tpatch-debug 目录下文件是否生成，将远程patch下载到你的设备上（主动下载和被动推送都可以，这里直接在PC上执行下面的命令(以下为mac下的命令，windows请修改文件分隔符)：
   ` adb push build/outputs/tpatch-debug/update.json /sdcard/Android/data/com.taobao.demo/cache/update.json`
   ` adb push build/outputs/tpatch-debug/patch-*.tpatch /sdcard/Android/data/com.taobao.demo/cache`