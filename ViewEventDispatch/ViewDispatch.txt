
View类
1. View的基本Touch事件有ACTION_DOWN, ACTION_UP, ACTION_MOVE构成。 
2. View的Click事件是由Touch构成
3. View先处理Touch事件. 如果OnTouchListenr部位空，调用OnTouchListenr.onTouch(View v, MotionEvent event)方法
4. OnTouchListenr.onTouch默认返回false. View.dispatchTouchEvent()继续调用OnTouchEvent方法。
   如果OnTouchListenr.onTouch返回true。则不继续处理View.OnTouchEvent()方法。
5. View首先判断是否可点击(viewFlags & CLICKABLE) == CLICKABLE
6. mFocused记录获取事件的View.

ViewGroup类
1. dispatchTouchEvent()
   ->首先调用onInterceptTouchEvent()方法拦截事件
   ->onInterceptTouchEvent默认返回false,如果返回true则不继续往下分发，调用父类的onTouchEvent()方法
   ->如果onInterceptTouchEvent返回false,遍历ViewGroup每个子View.调用View.dispatchTouchEvent()， 
     View.dispatchTouchEvent()会调用onTouchEvent方法处理事件。如果真的是焦点事件则返回true.
	 
	 
1.Touch事件分发中只有两个主角:ViewGroup和View。ViewGroup包含onInterceptTouchEvent、dispatchTouchEvent、
  onTouchEvent三个相关事件。View包含dispatchTouchEvent、onTouchEvent两个相关事件。其中ViewGroup又继承于View。

2.ViewGroup和View组成了一个树状结构，根节点为Activity内部包含的一个ViwGroup。

3.触摸事件由Action_Down、Action_Move、Aciton_UP组成，其中一次完整的触摸事件中，Down和Up都只有一个，Move有若干个，可以为0个。

4.当Acitivty接收到Touch事件时，将遍历子View进行Down事件的分发。ViewGroup的遍历可以看成是递归的。
  分发的目的是为了找到真正要处理本次完整触摸事件的View，这个View会在onTouchuEvent结果返回true。

5.当某个子View返回true时，会中止Down事件的分发，同时在ViewGroup中记录该子View。接下去的Move和Up事件将由该子View直接进行处理。
  由于子View是保存在ViewGroup中的，多层ViewGroup的节点结构时，上级ViewGroup保存的会是真实处理事件的View所在的ViewGroup对象:
  如ViewGroup0-ViewGroup1-TextView的结构中，TextView返回了true，它将被保存在ViewGroup1中，而ViewGroup1也会返回true，
  被保存在ViewGroup0中。当Move和UP事件来时，会先从ViewGroup0传递至ViewGroup1，再由ViewGroup1传递至TextView。

6.当ViewGroup中所有子View都不捕获Down事件时，将触发ViewGroup自身的onTouch事件。触发的方式是调用super.dispatchTouchEvent函数，
   即父类View的dispatchTouchEvent方法。在所有子View都不处理的情况下，触发Acitivity的onTouchEvent方法。

7.onInterceptTouchEvent有两个作用：1.拦截Down事件的分发。2.中止Up和Move事件向目标View传递，
  使得目标View所在的ViewGroup捕获Up和Move事件。

  
 
8. InputHandler.handleMotion()
   -> ViewRootImpl.dispatchMotion ()
   ->ViewRootImpl.dispatchPointer(event, sendDone);  //这个地方!
   ->ViewRootImpl.deliverPointerEvent(event);//走入到这里.----这个地方
   ->handled = mView.dispatchTouchEvent(event);
   -> 
   
 
 
 
 

8. WindowMangerService启动时候回创建InputManager。 
   ->InputManager.start()会创建InputDispatch和InputerReader两个线程，
   ->InputReader线程会扫描输入设备驱动获取事件，handleResumeActivity函数来使这个Activity进入Resumed状态。
     在调用handleResumeActivity函数的过程中，ActivityThread会通过android.view.WindowManagerImpl类为
	 该Activity创建一个ViewRoot实例，并且会通过调用ViewRoot类的setView成员函数把与该Activity关联的View
	 设置到这个ViewRoot中去，而Activity正是通过ViewRoot类的setView成员函数来注册键盘消息接收通道的
9. 这个函数中与注册键盘消息接收通道（InputChannel）相关的逻辑主要有三处，
   一是调用requestLayout函数来通知InputManager，这个Activity窗口是当前被激活的窗口，
   二是调用sWindowSession（WindowManagerService内部类Session的远程接口）的add成员函数来把键盘消息接收通道的一端注册在InputManager中，
   三是调用InputQueue的registerInputChannel成员函数来把键盘消息接收通道的另一端注册在本应用程序的消息循环（Looper）中。
     这样，当InputManager监控到有键盘消息时，就会先找到当前被激活的窗口，然后找到其在InputManager中对应的键盘消息接收通道，
	 通过这个通道在InputManager中的一端来通知在应用程序消息循环中的另一端，就把键盘消息分发给当前激活的Activity窗口了。

10. InputHandler是ViewRootImpl中的变量。 InputHandler调用handleKey()方法, handleKey()回答ViewRootImpl.dispatchKey(event, true); 
    方法。

11. ViewRootImpl.dispatchKey(KeyEvent event, boolean sendDone)
    ->调用Handler发送事件方法。sendMessageAtTime(msg, event.getEventTime()); 
      回调到ViewRootImpl.deliverKeyEvent()方法处理。	
12. (1)事件分发首先处理键盘事件之前的处理DecorView.dispatchKeyEventPreIme（）
       如果返回true就不用继续处理了，不处理输入法和View（Activity）事件分发。
    (2)然后交给键盘事件处理 imm.dispatchKeyEvent(mView.getContext(), seq, event, mInputMethodCallback);  
    (3)最后交给Activity View分发事件deliverKeyEventToViewHierarchy(event, sendDone);  。  

13. DecorView.dispatchKeyEvent()
    ->交个Activity.Callback.dispatchKeyEvent(event) 
    -> Activity.dispatchKeyEvent(Event event)
    ->DecorView.dispatchKeyEvent();	
     

