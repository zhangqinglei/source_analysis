
1. 结构体struct：把不同类型的数据组合成一个整体，自定义类型。
   共同体union：使几个不同类型的变量共同占用一段内存。
   struct和union都有内存对齐，结构体的内存布局依赖于CPU、操作系统、编译器及编译时的对齐选项
   1.数据类型自身的对齐值：
     对于char型数据，其自身对齐值为1，对于short型为2，对于int,float,double类型，其自身对齐值为4，单位字节。
   2.结构体或者类的自身对齐值：其成员中自身对齐值最大的那个值。
   3.指定对齐值：#pragma pack(n)，n=1,2,4,8,16改变系统的对齐系数
   4.数据成员、结构体和类的有效对齐值：自身对齐值和指定对齐值中小的那个值。
   
2. 常见数据类型及其长度：
   注意long int和int一样是4byte，long double和double一样是8byte。
3. 在标准c++中，int的定义长度要依靠你的机器的字长，也就是说，如果你的机器是32位的，int的长度为32位，
   如果你的机器是64位的，那么int的标准长度就是64位
   
   结构体struct：不同之处，stuct里每个成员都有自己独立的地址。sizeof(struct)是内存对齐后所有成员长度的加和。
   共同体union：当共同体中存入新的数据后，原有的成员就失去了作用，新的数据被写到union的地址中。
   sizeof(union)是最长的数据成员的长度。
4. static 和const分别怎么用，类里面static和const可以同时修饰成员函数吗。
    
   1.局部变量：
   在局部变量之前加上关键字static，局部变量就被定义成为一个局部静态变量。	
   1）内存中的位置：静态存储区
   2）初始化：未经初始化的全局静态变量会被程序自动初始化为0（自动对象的值是任意的，除非他被显示初始化）
   3）作用域：作用域仍为局部作用域，当定义它的函数或者语句块结束的时候，作用域随之结束。
   当static用来修饰局部变量的时候，它就改变了局部变量的存储位置（从原来的栈中存放改为静态存储区）及其生命周期
   （局部静态变量在离开作用域之后，并没有被销毁，而是仍然驻留在内存当中，直到程序结束，只不过我们不能再对他进
   行访问），但未改变其作用域。
   
   2.全局变量
   在全局变量之前加上关键字static，全局变量就被定义成为一个全局静态变量。
   1）内存中的位置：静态存储区（静态存储区在整个程序运行期间都存在）
   2）初始化：未经初始化的全局静态变量会被程序自动初始化为0（自动对象的值是任意的，除非他被显示初始化）
   3）作用域：全局静态变量在声明他的文件之外是不可见的。准确地讲从定义之处开始到文件结尾。
   static修饰全局变量，并为改变其存储位置及生命周期，而是改变了其作用域，使当前文件外的源文件无法访问该变量，
   好处如下：（1）不会被其他文件所访问，修改（2）其他文件中可以使用相同名字的变量，不会发生冲突。对全局函数
   也是有隐藏作用。