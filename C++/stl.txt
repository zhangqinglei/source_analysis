

List 
  内部结构是链表
  
  
Vector 
  内部结构是动态数组
  
  
Dequeue
  内部动态数组


Map
 内部结构是红黑树
 
 1. 可通过pair封装成一个结构对象。map容器所要做的，就是将这个pair对象插入到红黑树，
    完成一个元素的添加。同时，也要提供一个仅使用键值进行比较的函数对象，将它传递给
    红黑树。由此，就可利用红黑树的操作，将map元素数据插入到二叉树中的正确位置，也
    可以根据键值进行元素的删除和检索。
	
Set
  内部结构是二叉树
  
  
STL中顺序容器类和关联式容器类的主要特征如下：
（1）Vector
 1、内部数据结构：连续存储，例如数组。
 2、随机访问每个元素，所需要的时间为常量。
 3、在末尾增加或删除元素所需要时间与元素数目无关，在中间或开头增加或删除元素所需时间随元素数目呈线性变化。
 4、可动态增加或减少元素，内存管理自动完成，但程序员可以使用reserve()成员函数来管理内存。
 5、vector的迭代器在内存重新分配时将失效(它所指向的元素在该操作的前后不再相同)。当把超过capacity()-size()个元素的插入vector中时，内存会重新分配，所有的迭代器都将失效；否则，指向当前元素以后的任何元素的迭代器都将失效。
    建议：使用vector时，用reserve()成员函数预先分配需要的内存空间，它既可以保护迭代器使之不会失效，又可以提高运行效率。
（2）deque
 1、内部数据结构：连续存储或分段连续存储，具体依赖于实现。
 2，随机访问每个元素，所需要的时间为常量。
 3、在开头和结尾增加元素所需时间与元素数目无关，在中间增加或删除元素所需时间随元素数目呈线性变化。
 4、可动态增加或减少元素，内存管理自动完成，不提供用于内存管理的成员函数。
 5、增加任何元素都将使deque的迭代器失效。在deque的中间删除元素将使迭代器失效。在deque的头或尾删除元素时，只有指向该元素的迭代器失效。
（3）list
 1、内部数据结构：双向环状链表。
 2、不能随机访问一个元素。
 3、可双向遍历。
 4、在开头、末尾和中间任何地方增加或删除元素所需时间都为常数。
 5、可动态增加或减少元素，内存管理自动完成。
 6、增加任何元素都不会使迭代器失效。删除元素时，除了指向当前被删除元素的迭代器外，其他迭代器都不会失效。
（4）slist
  1、内部数据结构：单向链表。
  2、不可双向遍历，只能从前向后遍历。
  3、其他特性与list相同。
     建议：尽量不要使用slist的insert，erase，previous等操作。因为这些操作需要向前遍历，但是slist不能直接向前遍历，所以它会从头开始向后搜索，所需时间与位于当前元素之前的元素个数成正比。slist专门提供了insert_after,earse_after等函数进行优化。但若经常需要向前遍历，建议选用list。
（5）stack
适配器，它可以将任意类型的序列容器转换为一个堆栈，一般使用deque作为支持的序列容器。
元素只能后进先出。
不支持遍历操作。
（6）queue
   适配器，它可以将任意类型的序列容器转换为一个队列，一般使用deque作为支持的序列容器。
   元素只能先进先出。
   不支持遍历操作。
（7）priority_queue
   适配器，它可以将任意类型的序列容器转换为一个优先队列，一般使用vector作为底层存储结构。
   只能访问第一个元素，不支持遍历操作。
   第一个元素始终是优先级最高的元素。
   建议：当需要stack、queue或priority_queue这样的数据结构时，直接使用对应的容器类，不要使用deque去做它们类似的工作。
（8）set
   1、键和值相等。
   2、键唯一。
   3、元素默认按升序排列。
   4、如果迭代器指向的元素被删除，则该迭代器失效。其他任何增加、删除元素的操作都不会使该迭代器失效。
（9）multiset
键可以不唯一。
其他特点与set相同。
（10）hash_set
与set相比较，它里面的元素不一定是经过排序的，而是按照所用的hash函数分派的，它能提供更快的搜索速度（当然跟hash函数有关）。
其他特点与set相同。
（11）hash_multiset
 1、键可以不唯一。
 2、其他特点与hash_set相同。
（12）map
 1、键唯一。
 2、元素默认按键的升序排列。
 3、如果迭代器所指向的元素被删除，则该迭代器失效。其他任何增加、删除元素的操作都不会使迭代器失效。
（13）multimap
 1、键可以不唯一。
 2、塔器特点与map相同。
（14）hash_map
 1、与map相比较，它里面的元素不一定是按键值排序的，而是按照所用的hash函数分派的，它能提供更快的搜索速度（当然也与hash函数有关）。
 2、其他特点与map相同。
（15）hash_multimap
 1、键可以不唯一。
 2、其他特点与hash_map相同。