

1. Picasso类
   static volatile Picasso singleton = null;
   private final Picasso.Listener listener;
   private final Picasso.RequestTransformer requestTransformer;
   private final Picasso.CleanupThread cleanupThread;
   private final List<RequestHandler> requestHandlers;
   final Context context;
   final Dispatcher dispatcher;
   final Cache cache;
   final Stats stats;
   final Map<Object, Action> targetToAction;  //以target为Key保存Actio ImageViewAction
   final Map<ImageView, DeferredRequestCreator> targetToDeferredRequestCreator;
   final ReferenceQueue<Object> referenceQueue;
   final Config defaultBitmapConfig;
   boolean indicatorsEnabled;
   volatile boolean loggingEnabled;
   boolean shutdown;
   
   
2. BitmapHunter类继承Runnable
   final int sequence;
    final Picasso picasso;
    final Dispatcher dispatcher;
    final Cache cache;
    final Stats stats;
    final String key;
    final Request data;
    final int memoryPolicy;
    int networkPolicy;
    final RequestHandler requestHandler; //NetworkRequestHandler
    Action action;
    List<Action> actions;
    Bitmap result;
    Future<?> future;
    LoadedFrom loadedFrom;
    Exception exception;
    int exifRotation;
    int retryCount;
    Priority priority;

	构造函数
	->
	this.sequence = SEQUENCE_GENERATOR.incrementAndGet();
        this.picasso = picasso;
        this.dispatcher = dispatcher;
        this.cache = cache;
        this.stats = stats;
        this.action = action;
        this.key = action.getKey();
        this.data = action.getRequest();
        this.priority = action.getPriority();
        this.memoryPolicy = action.getMemoryPolicy();
        this.networkPolicy = action.getNetworkPolicy();
        this.requestHandler = requestHandler;
        this.retryCount = requestHandler.getRetryCount();
		
3. Dispatcher类
   private static final int RETRY_DELAY = 500;
   private static final int AIRPLANE_MODE_ON = 1;
   private static final int AIRPLANE_MODE_OFF = 0;
   static final int REQUEST_SUBMIT = 1;
   static final int REQUEST_CANCEL = 2;
   static final int REQUEST_GCED = 3;
   static final int HUNTER_COMPLETE = 4;
   static final int HUNTER_RETRY = 5;
   static final int HUNTER_DECODE_FAILED = 6;
   static final int HUNTER_DELAY_NEXT_BATCH = 7;
   static final int HUNTER_BATCH_COMPLETE = 8;
   static final int NETWORK_STATE_CHANGE = 9;
   static final int AIRPLANE_MODE_CHANGE = 10;
   static final int TAG_PAUSE = 11;
   static final int TAG_RESUME = 12;
   static final int REQUEST_BATCH_RESUME = 13;
   private static final String DISPATCHER_THREAD_NAME = "Dispatcher";
   private static final int BATCH_DELAY = 200;
   final Dispatcher.DispatcherThread dispatcherThread = new Dispatcher.DispatcherThread();
   final Context context;
   final ExecutorService service;
   final Downloader downloader;
   final Map<String, BitmapHunter> hunterMap;
   final Map<Object, Action> failedActions;
   final Map<Object, Action> pausedActions;
   final Set<Object> pausedTags;
   final Handler handler;
   final Handler mainThreadHandler;
   final Cache cache;
   final Stats stats;
   final List<BitmapHunter> batch;
   final Dispatcher.NetworkBroadcastReceiver receiver;
   final boolean scansNetworkChanges;
   boolean airplaneMode;

4. RequestCreator类   
   private final Picasso picasso;
   private final Builder data;
   private boolean noFade;
   private boolean deferred;
   private boolean setPlaceholder = true;
   private int placeholderResId;
   private int errorResId;
   private int memoryPolicy;
   private int networkPolicy;
   private Drawable placeholderDrawable;
   private Drawable errorDrawable;
   private Object tag;

4. ImageViewAction类
   class ImageViewAction extends Action<ImageView>
5. Action类  
   final Picasso picasso;
   final Request request;
   final WeakReference<T> target;
   final boolean noFade;
   final int memoryPolicy;
   final int networkPolicy;
   final int errorResId;
   final Drawable errorDrawable;
   final String key;
   final Object tag;
   boolean willReplay;
   boolean cancelled;
    
    	
   
2. Picasso.Builder.build()
   ->创建Downloader this.downloader = Utils.createDefaultDownloader(context);
     downloader OKHttpDownloader; 创建Downloader的时候创建缓存File cache = new File(context.getApplicationContext().getCacheDir(), "picasso-cache");
   ->创建LruCache Cache的大小为1048576 * memoryClass / 7;
   ->创建PicassoExecutorService this.service = new PicassoExecutorService();PicassoExecutorService继承 ThreadPoolExecutor
   ->创建transformer this.transformer = Picasso.RequestTransformer.IDENTITY;
   ->创建Stats stats = new Stats(this.cache);
   ->创建Dispatcher Dispatcher dispatcher = new Dispatcher(context, this.service, Picasso.HANDLER, this.downloader, this.cache, stats);
   ->返回Picasso实例 return new Picasso(context, dispatcher, this.cache, this.listener, this.transformer, this.requestHandlers, 
								stats, this.defaultBitmapConfig, this.indicatorsEnabled, this.loggingEnabled);
   
3. Picasso.load(String url)
    ->如果url为空创建RequestCreator return new RequestCreator(this, uri, 0);
	->否则return this.load(Uri.parse(path));

3. RequestCreator构造函数
   -> 如果Picasso关闭(shutdown)抛出异常
   ->this.picasso = picasso;
     this.data = new Builder(uri, resourceId, picasso.defaultBitmapConfig);

4. RequestCreator.into(ImageView target) 
   ->如果build变量检测到图片不为空，取消请求， 获取Drawable赋给ImageView PicassoDrawable.setPlaceholder(target, this.getPlaceholderDrawable());
   ->从LruCache中获取bitmap, 如果不为空删除请求直接复制给ImageView。
   ->创建Request Request request1 = this.createRequest(started);
     ->获取Key String requestKey1 = Utils.createKey(request1);
	 ->检测缓存策略是否从内存中读取 MemoryPolicy.shouldReadFromMemoryCache(this.memoryPolicy) 
	 ->如果读取， 如多是的话从缓存中读取Bitmap action = this.picasso.quickMemoryCacheCheck(requestKey1);
	 ->quickMemoryCacheCheck(String Key)
	   ->Bitmap cached = this.cache.get(key);
	     如果Cache不为空， 分发命中this.stats.dispatchCacheHit();
		 this.handler.sendEmptyMessage(0);
	 
   ->创建ImageViewAction  ImageViewAction action1 = new ImageViewAction(this.picasso, target, 
                          request1, this.memoryPolicy, this.networkPolicy, this.errorResId, this.errorDrawable, 
						  requestKey1, this.tag, callback, this.noFade);
   ->将action提交到分发器this.picasso.enqueueAndSubmit(action1);
   
   
   

5. Picasso.enqueueAndSubmit(Action action)
   ->在targetToAction中查找是不Action已经存在，不存在则添加新的action target为Key
   ->this.targetToAction.put(target, action);
   ->this.submit(action);

6. Picasso.submit()
   ->this.dispatcher.dispatchSubmit(action);

7. Dispatcher.dispatchSubmit(Action action)   
   -> this.handler.sendMessage(this.handler.obtainMessage(1, action));
   ->Picasso.dispatcher.performSubmit(action);
   
8. Dispatcher.performSubmit(Action action, boolean dismissFailed)
   ->查询hunterMap中是否有BitmapHunter, 如果有直接hunter.attach(action);
   ->如果线程池service没有shutdown,创建BitmapHunter
   ->hunter = BitmapHunter.forRequest(action.getPicasso(), this, this.cache, this.stats, action);
     返回BitmapHunter变量
   ->将Hunter提交给线程池hunter.future = this.service.submit(hunter);
   ->this.hunterMap.put(action.getKey(), hunter);
   
9. BitmapHunter.run()
   ->hunt();
   ->this.dispatcher.dispatchComplete(this); 主要是处理 this.result;

9. BitmapHunter.hunt()
   ->首先从内存缓存中获取，如果不为空直接返回Bitmap
   ->其次从 NetworRequestHandelr中获取Result result = this.requestHandler.load(this.data, this.networkPolicy);
   ->如果bitmap = result.getBitmap(); 如果Bitmap不为空直接返回，
   ->否则读取文件流解析Bitmap.
   
10. NetworRequestHandelr.load()
    ->OKHttpDownloader.load(Uri uri, int networkPolicy)
	
11. OKHttpDownloader.load(Uri uri, int networkPolicy)
    ->设置CacheControl
	->NetworkPolicy.shouldReadFromDiskCache(networkPolicy)
	  NetworkPolicy.shouldWriteToDiskCache(networkPolicy)
	->执行OKHttpClient请求
	  com.squareup.okhttp.Response response = this.client.newCall(builder1.build()).execute();
	->ResponseBody responseBody = response.body();
	->封装请求结果返回
      return new Response(responseBody.byteStream(), fromCache, responseBody.contentLength());	
   
10. Dispatcher.dispatchComplete(BitmapHunter hunter)
    ->通过Handler发送hunter. this.handler.sendMessage(this.handler.obtainMessage(4, hunter));
    ->this.dispatcher.performComplete(info2);
	->将结果保存到缓存
	->this.batch(hunter); 处理结果
	->handler 遍历batch. Picasso.complete()
	
11. Picasso.complete(BitmapHunter hunter)
	->获取Action ImageViewAction;
    ->	this.deliverAction(result, from, single);
	->
	
12. Picasso.deliverAction(Bitmap result, Picasso.LoadedFrom from, Action action)	
    ->action.complete(result, from);
	
13. ImageViewAction.complete(Bitmap result, LoadedFrom from)
    ->获取ImageView ImageView target = (ImageView)this.target.get();
    ->设置图片PicassoDrawable.setBitmap(target, context, result, from, this.noFade, indicatorsEnabled);	
   
   
10. BitmapHunter.hunt()
    ->requestHandler.load() Result result = this.requestHandler.load(this.data, this.networkPolicy);
	  requestHandler是NetworkRequestHandler变量
	
11. NetworkRequestHandler.loader()
    ->UrlConnectionDownloader.load() 获取response Response response = this.downloader.load(request.uri, request.networkPolicy);
	->获取Bitmap Bitmap bitmap = response.getBitmap();
	->封装成Result返回
	->如果bitmap为null则封装InputStream返回return new Result(is, loadedFrom);
	  
12. UrlConnectionDownloader.load(Request request, int networkPolicy) 
    ->return new Response(connection.getInputStream(), fromCache, contentLength1);
    将	connection.getInputStream()封装到Response中返回。
	
	
  
  
   
   
   
   
   如果url或者资源ID获取失败首先从ImageVeiw holder中获取，没有的话从缓存中获取，如果缓存中没有则封装ImageViewAction，
   发出请求，请求首先从本地缓存中查询，没有的话网络请求。
   RequestCreator封装ImageViewAction，调用Picasso.enqueueAndSubmit(action1);
   Picasso调用dispatcher.dispatchSubmit(action)发送action . 实际通过Handler调用。
   Dispatcher创建BitmapHunter线程类塞到线程池中。执行请求。
   
   (1)Picasso将ImageView封装成ImageViewAction action
   (2)Picasso将 action交给Dispstcher处理
   (3)Dispatcher 创建BitmapHunter 变量hunter交个线程池处理，BitmapHunter复制数据的下载与显示  
   (4)BitmapHunter首先从缓存中查找，如果没有这创建网络请求
   (5)NetworkRequestHandler 调用UrlConnectionDownloader现在，返回Response.
   (6)得到缓存Dispatcher通过handler处理结果performComplete， 如果需要缓存的话则将结果缓存， hunterMap移除BitmapHunter
   (7)将hunter添加到Dipstather 的batch中。发到主线程. 主线程Handler在Picasso类中定义
   (8)从hunter中获取ImageViewAction action 和bitmap;
   (9)action给图片赋值,调用ImgeViewAction给的ImageView赋值。
   
   
   
   Picasso内存策略 1.内存 2.磁盘 3.网络
   
   加载的时候如果检测到有图片Builder.setPlaceholder. 直接设置ImageView drawable  
   (ImageView)target.setImageDrawable(placeholderDrawable);
   

----------------------------------------------------------------------------------------------------------   
   
Picasso.builder()
 ->构造Dispatcher，RequestHandler。和Downloader对象downloader, 实际是创建的UrlConnectionDownloader
   downloader被封装到Dispatcher中。

RequestCreator.into()
->获取Request request = createRequest(started);
->如果不成缓冲获取Bitmap, 创建ImageViewAction， 将Picasso,ImageView等封装到ImageView中 
  Action action = new ImageViewAction(picasso, target, request, memoryPolicy, networkPolicy, errorResId,
            errorDrawable, requestKey, tag, callback, noFade);   
			
->提交请求
  picasso.enqueueAndSubmit(action);
  
Picasso.enqueueAndSubmit(Action action)
->submit(action);
  dispatcher.dispatchSubmit(action);
  通过Dispatcher提交ImageViewAction
  通过Hnadler走到dispatcher.performSubmit(action); 
  
Dispatcher.performSubmit(Action action, boolean dismissFailed)
->hunter = forRequest(action.getPicasso(), this, cache, stats, action);
->提交到线程池里执行
  hunter.future = service.submit(hunter);
BitmapHunter.forRequest()
->创建BitmapHunter, 重Picasso中获取RequestHandler list, 将picasso,requestHandelr,
  dispatcher, action等封装到BitmapHunter
  return new BitmapHunter(picasso, dispatcher, cache, stats, action, requestHandler);
  
BitmapHunter.run()
->获取Bitmap对象result
result = hunt();

BimtmapHunter.hunt()
->获取result, 通过NetworkRequestHandler获取
  RequestHandler.Result result = requestHandler.load(data, networkPolicy);
->从result中获取InputStream is
  InputStream is = result.getStream();
->通过is解析Bitmap
  bitmap = decodeStream(is, data);
->获取Bitmap返回
  dispatcher.dispatchComplete(this);
  从ImageViewAction中取出ImageView,设置Bitmap。
  
  
BitmapHuter.decodeStream(InputStream stream, Request request)
->通过BitmapFactory获取Bitmap
  BitmapFactory.decodeStream(stream, null, options);
  
NetworkRequestHandler.load(Request request, int networkPolicy)
->通过UrlConnectionDownloader.load()获取Response
  从Response中获取InputStream
  InputStream is = response.getInputStream();
  将InputStream封装到Result中
  return new Result(is, loadedFrom);

UrlConnectionDownloader.load()
->创建UrlConnection连接
  HttpURLConnection connection = openConnection(uri);
  connection.setUseCaches(true);
->将InputStream封装到Response中
  return new Response(connection.getInputStream(), fromCache, contentLength);
  
  
RequestCreator调用Picasso,Picasso调动Dispatcher.submit(Action),Dispatcher中创建
BitmapHunter对象hunter,将hunter提交到线程池中。hunter的run()方法调用hunt()方法,返回
Bitmap, hunte()方法，调用NetworkRequestHandler，通过UrlConnectionDownloader创建UrlConnection连接，
封装InputStream到Response中，hunt()方法中从response中获取InputStream，对象，通过BitmapFactoy.decodeStream()
获取Bitmap。
  
   
   
   
   
   
   
   
   
   
   
	