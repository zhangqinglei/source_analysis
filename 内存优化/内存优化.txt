1. 强引用(Strong Reference)
   默认引用。如果一个对象具有强引用，垃圾回收器绝不会回收它。在内存空 间不足时，
   Java虚拟机宁愿抛出OutOfMemory的错误，使程序异常终止，也不会强引用的对象来解决内存不足问题。
   
2. 软引用（SoftReference） 
   如果内存空间足够，垃圾回收器就不会回收它，如果内存空间不足了，就会回收这些对象的内存。

3. 弱引用（WeakReference）
   在垃圾回收器一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。
   
4. 虚引用（PhantomReference）
   如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收。
   
   
     
5. Handler内存优化
   Handler内存泄漏导致的原因是内部类持有Activity的引用， Handler内部变量mQueue.Message.target
   持有Handler对象的引用。如果Activity调用finish()方法退出Activity.由于mQueue.Message.target
   部位空，导致Handler被持有，Handler持有Activity。导致Activity不能被释放。
   会有一条MessageQueue -> Message -> Handler -> Activity的链
  
   解决方案：
   (1)将Handeler内部类声明为静态内部类， 静态内部类持有Activity的弱引用。
   (2)Handler.handelr.removeCallbacksAndMessages(null);直接消除对Activity的引用链。
   
1. 内存泄漏产生的原因：
   (1)静态变量或者方法是放在静态数据区的，也就是在程序运行的过程中，只要加载过这个类之后，静态的变量或者方法，
      就一直会在静态数据区存在，不会释放资源。因为静态变量或者方法不是凭空存在的 
   (2)一些读取数据库动态注册广播没有及时关闭注销也是容易造成内存泄露的.
      BroadcastReceiver、ContentObserver，FileObserver在Activity的onDeatory或者某类的生命周期结束后，
	  一定要unregister掉，否则这个Activity会一直被system强引用，不会被内存回收
	  
   (3)单例模式导致的内存泄露，
      单例模式的特点就是他的生命周期和Application一样，如果某个Activity示例被一个单利所持有，
	  也就是说单利里面引用了他，就会造成Activity对象会无法正常回收释放。
   (4)属性动画导致内存泄露
      例如代码中设置了属性动画（ObjectAnimator），在Activity中启动了动画，但是在销毁的时候，没有调用cancle方法，虽然我们看不到动画了，
	  但是这个动画依然会不断地播放下去，动画引用所在的控件，所在的控件引用Activity，这就造成Activity无法正常释放   

  
  
