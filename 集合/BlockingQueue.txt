
==================================================================================
对于BlockingQueue 
offer()方法，添加数据成功返回true, 否则返回fasle
add()方法， 调用offer()方法添加数据， 如果添加成功返回true,添加失败抛出异常
put()方法。 插入数据， 如果队列满就一直等待， 知道插入成功

poll()方法， 如果队列不为空，返回队头，否则返回null。
take()方法，如果队列为空一直等待，否则返回队头， 调用dequeue()方法获取队头。
peek()方法，根据takeIndex 在队列Items中获取数据。如果为null,就返回null, peek
            不移除队头。
			
			
==================================================================================
ArrayBlockingQueue
采用重如锁保持同步

			
==================================================================================
LinkedBlockingQueue 
offer()方法, 获取重入锁，将数据封装到Node中， 添加到队尾。 add跟ArrayBlockingQueue一样

插入和读取的重如锁不一样。插入putLock, 读取takeLock



==================================================================================
PriorityBlockingQueue
扩容时进行了同步处理。在数组小于64时每次扩容约2倍，大于64时每次扩容约1.5倍。



==================================================================================
DelayQueue
依然是交给了offer实现，先加锁，然后放入元素，若放入的元素成为了头元素则将leader置为null并唤醒在等待available的线程。 


首先依然是加锁，然后获取队列中的头元素但是不移除，如果头元素为空则阻塞线程。若不为空，判断其等待时间是否结束，
结束则返回。若等待时间未结束，判断当前是否已有leader线程，有则直接阻塞，无责将leader线程设置为当前线程，
并设置其在到达delay时间前阻塞（即队列头元素的等待时间前）。 看到这里应该明白为什么当有新元素成为头元素时要设
leader为null并且唤醒所有等待线程了吧？当有新元素成为头元素时原leader的等待时间已经无效了，此时所有等待的线程将
再一次竞争leader并等待获取头元素。精妙的设计！




1. ArrayBlockingQueue类
   this.items = new Object[capacity];
   lock = new ReentrantLock(fair);
   notEmpty = lock.newCondition();
   notFull =  lock.newCondition();
   
2. ArrayBlockingQueue.offer(T t)
   public boolean offer(E e) {
        Objects.requireNonNull(e);
        final ReentrantLock lock = this.lock;
        lock.lock();
        try {
            if (count == items.length)
                return false;
            else {
                enqueue(e);
                return true;
            }
        } finally {
            lock.unlock();
        }
    }
	
	1.获取重新入锁
	2.如果队列达到上限返回false
	3.没有达到上限加入队列, 添加成功返回True
	
	
3. ArrayBlockingQueue.add(T t)
   就是调用offer()函数，如果如果返回true添加成功，否则，抛出异常
   throw new IllegalStateException("Queue full");。
   
4. ArrayBlockingQueue.poll()
   获取重入锁， 如果没有返回null
   
5. ArrayBlockingQueue.take() 
   public E take() throws InterruptedException {
        final ReentrantLock lock = this.lock;
        lock.lockInterruptibly();
        try {
            while (count == 0)
                notEmpty.await();
            return dequeue();
        } finally {
            lock.unlock();
        }
    }
	
	如果队列的长度为0 则等待。
	
6. LinkedBlockingQueue类
   内部由Node创建链表
   
7. LinkedBlockingQueue.offer(E e)
   获取重新入锁，在队尾插入节点
   
 
8. LinkedBlockingQueue.add(E e)
   调用offerLast()方法，如果添加失败就抛出异常
   
9. LinkedBlockingQueue.put(E e)
   获取重新入锁，在队尾插入节点,如果插入失败就等待。
   
   
================================ArrayBlockingQueue=================================
->offer()
  如果满了则返回false, 添加失败， 否则调用调用enqueue()
  
->add()
  调用offer()添加元素，如果添加失败报异常， 添加成功返回True
  
->peek()直接获取头部元素



LinkedBlockingQueue是线程安全的
LinkedBlockingQueue.add()如果添加失败就抛出异常


     
   

















	
	