

1. ActivityManagerService. ComponentName startServiceLocked(IApplicationThread caller,  
            Intent service, String resolvedType,  
            int callingPid, int callingUid)
   ->函数首先通过retrieveServiceLocked来解析service这个Intent，就是解析前面我们在AndroidManifest.xml定义的Service标签的intent-filter相关内容
     ，然后将解析结果放在res.record中，然后继续调用bringUpServiceLocked进一步处理。
   ->如果进程存在则sendServiceArgsLocked(r, execInFg, false);
   ->否则创建进程app=mAm.startProcessLocked(procName, r.appInfo, true, intentFlags, "service", r.name, false, isolated, false)   
  

2. ActivityManagerService.realStartServiceLocked()
   ->app.thread.scheduleCreateService(r, r.serviceInfo);  
   ->ApplicationThread.scheduleCreateService();
   ->Handler调用handleCreateService((CreateServiceData)msg.obj);  
   -> java.lang.ClassLoader cl = packageInfo.getClassLoader();  
      service = (Service) cl.loadClass(data.info.name).newInstance();   
	  ContextImpl context = new ContextImpl();  
      context.init(packageInfo, null, this);  
      Application app = packageInfo.makeApplication(false, mInstrumentation);  
      context.setOuterContext(service);  
      service.attach(context, this, data.info.name, data.token, app,  
                ActivityManagerNative.getDefault());  
      service.onCreate();  
      mServices.put(data.token, service);
	  
	  
3. startService第一次启动时会调用OnCreate()和onStart(),以后只会调用onStart();
   stopService()会调用到onDestory();
   
4. 如果应用程序当中需要使用Service来执行后台任务的话，请一定要注意只有当任务正在执行的时候才应该让Service运行起来。
   另外，当任务执行完之后去停止Service的时候，要小心Service停止失败导致内存泄漏的情况
   当我们启动一个Service时，系统会倾向于将这个Service所依赖的进程进行保留，这样就会导致这个进程变得非常消耗内存。
   并且，系统可以在LRU cache当中缓存的进程数量也会减少，导致切换应用程序的时候耗费更多性能。严重的话，
   甚至有可能会导致崩溃，因为系统在内存非常吃紧的时候可能已无法维护所有正在运行的Service所依赖的进程了
   
   那么我们如何才能知道程序界面是不是已经不可见了呢？其实很简单，只需要在Activity中重写onTrimMemory()方法，
   然后在这个方法中监听TRIM_MEMORY_UI_HIDDEN这个级别，一旦触发了之后就说明用户已经离开了我们的程序，
   那么此时就可以进行资源释放操作了，如下所示：
   
   注意onTrimMemory()方法中的TRIM_MEMORY_UI_HIDDEN回调只有当我们程序中的所有UI组件全部不可见的时候才会触发，
   这和onStop()方法还是有很大区别的，因为onStop()方法只是当一个Activity完全不可见的时候就会调用，
   
   