1 创建RequestQueue对象 Volley.newRequestQueue(Context context) 
  -> newRequestQueue(context, null); //public static RequestQueue newRequestQueue(Context context, HttpStack stack)
  
  -> 创建缓存/data/user/0/com.example.lifeix.testapplication/cache/volley,
	 创建HurlStack, 创建BasicNetWork, 
	 创建RequestQueue将缓存和NetWork保存到RequestQueue中.
	 
  ->Queue.start();
    创建CachDispatcher 和 NetworkDispatcher; 同时启动Dispatcher
	Dispatcher是对Thread的继承和封装.
	RequestQueue中mCacheQueue和mNetworkQueue都是PriorityBlockingQueue<Request>变量
	DiskBaseCache继承Cache， mCache是DiskBaseCache变量.
	mMaxCacheSizeInBytes是mCache的大小为5M
	mDelivery是ResponseDelivery变量ExecutorDelivery.
	mCacheQueue, mCache, mNetworkQueue, mDelivery都封装到CacheDispatcher中.
	mCache, mNetworkQueue, mDelivery, mNetWork封装到NetworkDispatcher中.
	
	
	
2  NetworkDispatcher运行，从请求队列 mQueue中取出Request，
   ->mNetwork(BasicNetWork)对request进行处理.
   ->如果有缓存直接返回，networkResponse.notModified（httpcode==304）
   ->没有缓存则解析返回结果
     Response<?> response = request.parseNetworkResponse(networkResponse);
   ->是否需要缓存 是？缓存
   ->响应回调, 回调Request会把mResponseDelivered设置为true, markDelivered(); 转移到4
     mDelivery.postResponse
   
3. BasicNetWor.performRequest(Request<?> request);
   ->获取url和请求Header
   ->创建HttpURLConnection
     设置链接超时时间，读取超时时间，是否缓存等.
	 将Header信息设置到connection中，connection.addRequestProperty(headerName, map.get(headerName));
	 设置请求方法 GET,Post,Delete等,connection.setRequestMethod("POST");
	 返回响应HttpResponse
	 
4. ExecutorDelivery回调postResponse
   ExecutorDelivery创建时会创建Executor变量mResponsePoster。
   mResponsePoster.execute(new ResponseDeliveryRunnable(request, response, runnable));
   mResponsePoster添加回调线程ResponseDeliveryRunnable

5. ResponseDeliveryRunnable->run()
   ->调用Request回调函数mRequest.deliverResponse(mResponse.result);
   ->Response.Listner.onSuccess();
   
   
二、创建请求，添加到请求队列中。

1. RequestQueue.add()
   ->Request 将RequestQueue保存到自身, request.setRequestQueue(this);
   ->将request保存到mCurrentRequests中，   mCurrentRequests是Set<Request>变量。
   ->request.addMarker("add-to-queue");
   ->如果 Request不需要缓存，直接添加到mNetworkQueue中。
   ->如果需要缓存request获取cacheKey(url), cacheKey是rqeust的url
     在mWaitingRequests中查找是否有缓存的请求队列。mWaitingRequests是Map<String, Queue<Request>>变量。
	 如果请求队列为空，则创建请求队列stagedRequests = new LinkedList<Request>();
	 如果没有请求队列则向mWaitingRequests添加null队列。（第一次请求不需要将队列缓存到mWaitingRequests中）
	 请求响应结束之后会移除
	 
	 
2.  如果请求设置缓存的话，将请求保存到缓存队列中。CacheDispatcher会查询缓存queue mCacheQueue;
    CacheDispatcher,run()
	->如果缓存没有命中或者过期(Expeired)则将请求添加到mNetworkQueue中，由NetworkDispatcher处理。
	  Cache.Entry entry = mCache.get(request.getCacheKey());获取命中的缓存.
	  
	  
6. Request.parseNetworkResponse(NetworkResponse respons) 
   解析数据返回
   
7. ImageRequest返回Response<Bitmap>数据, 创建Bitmap数据封装到Response中。
   return new Response(result, cacheEntry);
， StringRequest返回Response<String>数据.


======================================BasicNetwork========================================================
->NetworkResponse performRequest(Request<?> request)
  重写Network接口中的方法performRequest()
  调用HttpStack方法中的performRequest(request, headers); 来返回NetworkResponse

  
==========================================================================================================
1.BasicNetWork封装HurlStack, Stack 继承HttpStack， 重写HttpStack中的 
  performRequest(Request<?> request, Map<String, String> additionalHeaders)
2. RequestQueue封装DiskBaseCache和Stack
3.Dispatcher封装RequestQueue, Network, 和mDelivery 
  NetworkDispatcher networkDispatcher = new NetworkDispatcher(mNetworkQueue, mNetwork,
                    mCache, mDelivery);
					
  NetworkResponse networkResponse = mNetwork.performRequest(request);
  Response<?> response = request.parseNetworkResponse(networkResponse);
 
  mDelivery.postResponse(request, response);
  
  
  
===========================================================================================================
1. HttpStack.performRequest(Request<?> request)
   ->创建HttpURLConnection, 设置SSLSocketFactory
     HttpURLConnection connection = openConnection(parsedUrl, request);
	 
	 1. 将返回的的Hrader字段， 设置到BasicHeader中， response.addHeader(h)
	    将header设置到HttpResponse中。
     2. 创建BasicHttpEntity， 将InputStream， Content响应字段设置到entiy中。将Entity设置到HttpResponse中
	    
	    entity.setContent(inputStream);
        entity.setContentLength(connection.getContentLength());
        entity.setContentEncoding(connection.getContentEncoding());
        entity.setContentType(connection.getContentType());
		response.setEntity(entity)
		把OKHttp，的InputStream设置到entity中。
		
2. 在BasicNetwork 中调用HttpStack执行performRequest(), 获取HttpResponse。
3. 自定义Request,  重写Request的parseNetworkResponse(),从NetworkResponse 中取出数据，填写相应的数据结构。
   重写deliverResponse()， 调用Listener回调onResponse。
		
	
   
   


	 
	 
	
   
 
   
	
