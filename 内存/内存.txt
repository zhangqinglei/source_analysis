
1. Java运行是内存区域
   方法区 (Method Aera)
   虚拟机栈区 (VM stack area)
   本地方法栈区 (Native Method Stack)
   程序计数器区 (PC)
   堆(Heap)
   
2. 线程私有
   (1)程序计数器当前线程所执行的字节码的行号指示器
   (2)Java虚拟机栈Java方法执行的内存模型，每个方法被执行时都会创建一个栈帧，存储局部变量表、操作栈、动态链接、方法出口等信息。
   (3)每个线程都有自己独立的栈空间
   (4)线程栈只存基本类型和对象地址
   (5)方法中局部变量在线程空间中
   (6)本地方法栈Native方法服务。在HotSpot虚拟机中和Java虚拟机栈合二为一。
3. 线程共享的如下：
   Java堆存放对象实例，几乎所有的对象实例以及其属性都在这里分配内存。
   方法区存储已经被虚拟机加载的类信息、常量、静态变量、JIT编译后的代码等数据。
   运行时常量池方法区的一部分。用于存放编译期生成的各种字面量和符号引用。
   直接内存NIO、Native函数直接分配的堆外内存。DirectBuffer引用也会使用此部分内存。
   
4. HotSpot采用直接指针的方式引用变量

5. 内存溢出
   在JVM申请内存的过程中，会遇到无法申请到足够内存，从而导致内存溢出的情况。一般有以下几种情况：
   (1)虚拟机栈和本地方法栈溢出
      StackOverflowError: 线程请求的栈深度大于虚拟机所允许的最大深度(循环递归)
	  OutOfMemoryError: 虚拟机在扩展栈是无法申请到足够的内存空间，一般可以通过不停地创建线程引起此种情况
   (2)Java堆溢出: 当创建大量对象并且对象生命周期都很长的情况下，会引发OutOfMemoryError
   (3)运行时常量区溢出：OutOfMemoryError:PermGen space，这里一个典型的例子就是String的intern方法，当大量字符串使用intern时，会触发此内存溢出
   (4)方法区溢出：方法区存放Class等元数据信息，如果产生大量的类(使用cglib)，那么就会引发此内存溢出，OutOfMemoryError:PermGen space，
   
6. 垃圾收集对性能的影响一般有以下几个
   内存泄露
   程序暂停
   程序吞吐量显著下降
   响应时间变慢

7. Concurrent Collector:收集的同时可运行其他的工作进程
   Parallel Collector: 使用多CPU进行垃圾收集
   Stop-the-word(STW):收集时必须暂停其他所有的工作进程


8. GC的流程
   找出堆中活着的对象
   释放死对象占用的资源
   定期调整活对象的位置
 
9. GC算法
   Mark-Sweep 标记-清除
   Mark-Sweep-Compact 标记-整理
   Copying Collector 复制算法
   (1)Mark-标记从”GC roots”开始扫描(这里的roots包括线程栈、静态常量等)，给能够沿着roots到达的对象标记为”live”,
      最终所有能够到达的对象都被标记为”live”,而无法到达的对象则为”dead”。效率和存活对象的数量是线性相关的。
   (2)Sweep-清除扫描堆，定位到所有”dead”对象，并清理掉。效率和堆的大小是线性相关的。
   (3)Compact-压缩对于对象的清除，会产生一些内存碎片，这时候就需要对这些内存进行压缩、整理。包括：relocate(将存货的对象移动到一起，
      从而释放出连续的可用内存)、remap(收集所有的对象引用指向新的对象地址)。效率和存活对象的数量是线性相关的。
   (4)Copy-复制将内存分为”from”和”to”两个区域，垃圾回收时，将from区域的存活对象整体复制到to区域中。效率和存活对象的数量是线性相关的。

10. 内存效率
    内存消耗：copy需要两倍的最大live set内存；mark-sweep则只需要一倍
    效率上：copy与live set成线性相关，效率高；mark-sweep则与堆大小线性相关，效率较低。

11. 分代收集
    分代假设：大部分对象的寿命很短，“朝生夕死”，重点放在对年青代对象的收集，而且年青代通常只占整个空间的一小部分。
	把年青代里活的很长的对象移动到老年代。
	只有当老年代满了才去收集。
	收集效率明显比不分代高。
12. HotSpot虚拟机的分代收集，分为一个Eden区、两个Survivor去以及Old Generation/Tenured区，
    其中Eden以及Survivor共同组成New Generatiton/Young space。通常将对New Generation进行的回收称为Minor GC;对Old Generation
	进行的回收称为Major GC，但由于Major GC除并发GC外均需对整个堆以及Permanent Generation进行扫描和回收，因此又称为Full GC。	
	
13. 年青代通常使用Copy算法收集，会stop the world
    老年代收集一般采用Mark-sweep-compact, 有可能会stop the world，也可以是concurrent或者部分concurrent。
	
14. 那么何时进行Minor GC、何时进行Major GC? 一般的过程如下：
    (1)对象在Eden Space完成内存分配
    (2)当Eden Space满了，再创建对象，会因为申请不到空间，触发Minor GC，进行New(Eden + S0 或 Eden S1) Generation进行垃圾回收
    (3)Minor GC时，Eden Space不能被回收的对象被放入到空的Survivor（S0或S1，Eden肯定会被清空），另一个Survivor里不能被GC回收
	   的对象也会被放入这个Survivor，始终保证一个Survivor是空的	
	(4)在Step3时，如果发现Survivor区满了，则这些对象被copy到old区，或者Survivor并没有满，但是有些对象已经足够Old，也被放入Old Space。
	(5)当Old Space被放满之后，进行Full GC
	
15. New Generation的GC有以下三种：
    Serial
    ParallelScavenge
    ParNew	

16. Old Generation的GC有以下四种：
    Serial Old
    Parallel
    CMS

17. 对于Serial Old, Parallel Old而言触发机制为
    Old Generation空间不足
    Permanent Generation空间不足
    Minor GC时的悲观策略
    Minor GC后在Eden上分配内存仍然失败
    执行Heap Dump时
    外部调用System.gc,可通过-XX:+DisableExplicitGC来禁止 	
	
18. 对于CMS而言触发机制为:


19. 加载，验证，准备,解析，初始化
   
20. 验证阶段为类变量分配内存并初始化0
21. 初始化是类加载阶段的最后一段时间
    执行类构造器"<clinit>"
	<clinit>是编译器收集所有类变量和静态语句块语句合并产生的。
	<clinit>与类的构造函数不同，不需要显试的调用父类的<clinit>
	类的<init>()方法会调用父类的<init>()方法,虚拟机保证父类的<clinit>()方法在子类之前调用。
	父类的静态语句块优先于子类的静态语句块执行。
	如果类中没有静态语句块，则没有<clinit>()方法。
	

	
    	





















	
   
   

















   
   
   
  