1. 类的初始化 加载->验证->准备->解析->初始化
2. 类的加载时机静态变量或者静态方法调用， 类名.class， Class.for("")获取类， new 类。
   使用反射包(java.lang.reflect)的方法对类进行反射调用时，如果类还没有被初始化，则需先进行初始化，这点对反射很重要
   当初始化一个类的时候，如果其父类还没进行初始化则需先触发其父类的初始化
   

3. 加载：类加载过程的一个阶段：通过一个类的完全限定查找此类字节码文件，并利用字节码文件创建一个Class对象
   
4. 链接：验证字节码的安全性和完整性，准备阶段正式为静态域分配存储空间，注意此时只是分配静态成员变量的存储空间，
   不包含实例成员变量，如果必要的话，解析这个类创建的对其他类的所有引用。
5. 初始化：类加载最后阶段，若该类具有超类，则对其进行初始化，执行静态初始化器和静态初始化成员变量。 

6. Class.setAccessible(true);可设置类的可访问性。


7.RetentionPolicy.SOURCE ―― 这种类型的Annotations只在源代码级别保留,编译时就会被忽略
8.RetentionPolicy.CLASS ―― 这种类型的Annotations编译时被保留,在class文件中存在,但JVM将会忽略
9.RetentionPolicy.RUNTIME ―― 这种类型的Annotations将被JVM保留,所以他们能在运行时被JVM或其他使用反射机制
    