1. 类的初始化 加载->验证->准备->解析->初始化
2. 类的加载时机静态变量或者静态方法调用， 类名.class， Class.for("")获取类， new 类。
   使用反射包(java.lang.reflect)的方法对类进行反射调用时，如果类还没有被初始化，则需先进行初始化，这点对反射很重要
   当初始化一个类的时候，如果其父类还没进行初始化则需先触发其父类的初始化
   

3. 加载：类加载过程的一个阶段：通过一个类的完全限定查找此类字节码文件，并利用字节码文件创建一个Class对象
   
4. 链接：验证字节码的安全性和完整性，准备阶段正式为静态域分配存储空间，注意此时只是分配静态成员变量的存储空间，
   不包含实例成员变量，如果必要的话，解析这个类创建的对其他类的所有引用。
5. 初始化：类加载最后阶段，若该类具有超类，则对其进行初始化，执行静态初始化器和静态初始化成员变量。 

6. Class.setAccessible(true);可设置类的可访问性。


7.RetentionPolicy.SOURCE ―― 这种类型的Annotations只在源代码级别保留,编译时就会被忽略
8.RetentionPolicy.CLASS ―― 这种类型的Annotations编译时被保留,在class文件中存在,但JVM将会忽略
9.RetentionPolicy.RUNTIME ―― 这种类型的Annotations将被JVM保留,所以他们能在运行时被JVM或其他使用反射机制


10. 使用forName()会自动初始化该Class对象。为了使用类而做的准备工作一般有以下3个步骤：
    加载：由类加载器完成，找到对应的字节码，创建一个Class对象
    链接：验证类中的字节码，为静态域分配空间
    初始化：如果该类有超类，则对其初始化，执行静态初始化器和静态初始化块
	
11. Class.getName()获得名字全程 "com.lge.example.Child"
    Class.getSimpleName()只获得类名 "Child" 
    


12. getMethods()返回某个类的所有公用（public）方法包括其继承类的公用方法，当然也包括它所实现接口的方法。
    getDeclaredMethods()对象表示的类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，
	但不包括继承的方法。当然也包括它所实现接口的方法  

13. Java有两种加载器
    (1)启动类加载器(BootStrap ClassLoader) C++实现
    (2)	其他类加载器(Java实现) 并且都是继承java.lang.ClassLoader;
	
	(3)启动类加载器在<JAVA_HOME>\lib路径下 或者Xbootclasspath指定
	(4)拓展类加载器(Extension ClassLoader) 由sum.misc.Launcher$ExtClassLoader实现。
	   在<JAVA_HOME>\lib\ext目录下
	(5)应用程序ClassLoader sum.misc.Launcher$AppClassLoader。getSystemClassLoader();
       一般也称系统类加载器。
    (6)自定义加载器。
	
14. 栈帧存储了局部变量， 操作数栈， 动态链接和返回地址等信息。





	   
	
	