1. TrimMemory()方法中的TRIM_MEMORY_UI_HIDDEN回调只有当我们程序中的所有UI组件全部不可见的时候才会触发，
   这和onStop()方法还是有很大区别的，因为onStop()方法只是当一个Activity完全不可见的时候就会调用
   @Override
   public void onTrimMemory(int level) {
	   super.onTrimMemory(level);
	   switch (level) {
	    case TRIM_MEMORY_UI_HIDDEN:
		// 进行资源释放操作
		break;
	   }
   }
   除了刚才讲的TRIM_MEMORY_UI_HIDDEN这个回调，onTrimMemory()方法还有很多种其它类型的回调，
   可以在手机内存降低的时候及时通知我们。我们应该根据回调中传入的级别来去决定如何释放应用程序的资源：
   
   TRIM_MEMORY_RUNNING_MODERATE    
   表示应用程序正常运行，并且不会被杀掉。但是目前手机的内存已经有点低了，
   系统可能会开始根据LRU缓存规则来去杀死进程了。
   TRIM_MEMORY_RUNNING_LOW    
   表示应用程序正常运行，并且不会被杀掉。但是目前手机的内存已经非常低了，我们应该去释放掉一些
   不必要的资源以提升系统的性能，同时这也会直接影响到我们应用程序的性能。
   TRIM_MEMORY_RUNNING_CRITICAL    
   表示应用程序仍然正常运行，但是系统已经根据LRU缓存规则杀掉了大部分缓存的进程了。
   这个时候我们应当尽可能地去释放任何不必要的资源，不然的话系统可能会继续杀掉所有缓存中的进程，
   并且开始杀掉一些本来应当保持运行的进程，比如说后台运行的服务。
   
   
2. 避免在Bitmap上浪费内存
   当我们读取一个Bitmap图片的时候，有一点一定要注意，就是千万不要去加载不需要的分辨率。
   在一个很小的ImageView上显示一张高分辨率的图片不会带来任何视觉上的好处，但却会占用
   我们相当多宝贵的内存。需要仅记的一点是，将一张图片解析成一个Bitmap对象时所占用的内存
   并不是这个图片在硬盘中的大小，可能一张图片只有100k你觉得它并不大，但是读取到内存当中
   是按照像素点来算的，比如这张图片是1500*1000像素，使用的ARGB_8888颜色类型，那么每个像素
   点就会占用4个字节，总内存就是1500*1000*4字节，也就是5.7M，这个数据看起来就比较恐怖了。
 
3. 使用优化过的数据集合
   Android API当中提供了一些优化过后的数据集合工具类，如SparseArray，SparseBooleanArray，
   以及LongSparseArray等，使用这些API可以让我们的程序更加高效。传统Java API中提供的HashMap
   工具类会相对比较低效，因为它需要为每一个键值对都提供一个对象入口，
   而SparseArray就避免掉了基本数据类型转换成对象数据类型的时间。
   
4. 知晓内存的开支情况
   使用枚举通常会比使用静态常量要消耗两倍以上的内存，在Android开发当中我们应当尽可能地不使用枚举
   任何一个Java类，包括内部类、匿名类，都要占用大概500字节的内存空间
   任何一个类的实例要消耗12-16字节的内存开支，因此频繁创建实例也是会一定程序上影响内存的。
   在使用HashMap时，即使你只设置了一个基本数据类型的键，比如说int，但是也会按照对象的大小来分配内存，
   大概是32字节，而不是4字节。因此最好的办法就是像上面所说的一样，使用优化过的数据集合。
   
5. 使用ProGuard简化代码
    ProGuard相信大家都不会陌生，很多人都会使用这个工具来混淆代码，但是除了混淆之外，
	它还具有压缩和优化代码的功能。ProGuard会对我们的代码进行检索，删除一些无用的代码，
	并且会对类、字段、方法等进行重命名，重命名之后的类、字段和方法名都会比原来简短很多，
	这样的话也就对内存的占用变得更少了。
	
9. static int intVal = 42;
   static String strVal = "Hello, world!";
   编译器会为上述代码生成一个初始化方法，称为<clinit>方法，该方法会在定义类第一次被使用的时候调用。
   然后这个方法会将42的值赋值到intVal当中，并从字符串常量表中提取一个引用赋值到strVal上。
   当赋值完成后，我们就可以通过字段搜寻的方式来去访问具体的值了。
   
   static final int intVal = 42;
   static final String strVal = "Hello, world!";
   经过这样修改之后，定义类就不再需要一个<clinit>方法了，因为所有的常量都会在dex文件的初始化器
   当中进行初始化。当我们调用intVal时可以直接指向42的值，而调用strVal时会用一种相对轻量级
   的字符串常量方式，而不是字段搜寻的方式。
   
10. 增强型for循环（也被称为for-each循环）可以用于去遍历实现Iterable接口的集合以及数组，
11. 避免在内部调用Getters/Setters方法
    因为字段搜寻要比方法调用效率高得多，我们直接访问某个字段可能要比通过getters
	方法来去访问这个字段快3到7倍。
	
12. OnLowMemory
      OnLowMemory是Android提供的API，在系统内存不足，所有后台程序（优先级为background的进程，
	  不是指后台运行的进程）都被杀死时，系统会调用OnLowMemory。系统提供的回调：
	  Application/Activity/Fragementice/Service/ContentProvider
	  
13. OnTrimMemory是android 4.0之后提供的API，系统会根据不同的内存状态来回调。系统提供的回调有：
    Application/Activity/Fragement/Service/ContentProvider
	
	OnTrimMemory的参数是一个int数值，代表不同的内存状态：
	TRIM_MEMORY_COMPLETE：内存不足，并且该进程在后台进程列表最后一个，马上就要被清理
    TRIM_MEMORY_MODERATE：内存不足，并且该进程在后台进程列表的中部。
    TRIM_MEMORY_BACKGROUND：内存不足，并且该进程是后台进程。
    TRIM_MEMORY_UI_HIDDEN：内存不足，并且该进程的UI已经不可见了。
	
14. OnLowMemory和OnTrimMemory的比较
   OnLowMemory被回调时，已经没有后台进程；而onTrimMemory被回调时，还有后台进程。
   OnLowMemory是在最后一个后台进程被杀时调用，一般情况是low memory killer 杀进程后触发；
   而OnTrimMemory的触发更频繁，每次计算进程优先级时，只要满足条件，都会触发。
   通过一键清理后，OnLowMemory不会被触发，而OnTrimMemory会被触发一次。
	
   