

1. Http工作流程
   1）首先客户机与服务器需要建立连接。只要单击某个超级链接，HTTP的工作开始。
   2）建立连接后，客户机发送一个请求给服务器，请求方式的格式为：统一资源标识符（URL）、协议版本号，
      后边是MIME信息包括请求修饰符、客户机信息和可能的内容。
   3）服务器接到请求后，给予相应的响应信息，其格式为一个状态行，包括信息的协议版本号、
      一个成功或错误的代码，后边是MIME信息包括服务器信息、实体信息和可能的内容。
   4）4）客户端接收服务器所返回的信息通过浏览器显示在用户的显示屏上，然后客户机与服务器断开连接。
   
2. 一个完整的URL包括以下几部分：(协议://域名：端口/虚拟目录/文件)
   (1)协议部分：该URL的协议部分为“http：”，这代表网页使用的是HTTP协议。在Internet中可以使用多种协议，
      如HTTP，FTP等等本例中使用的是HTTP协议。在"HTTP"后面的“//”为分隔符
   (2)域名部分：该URL的域名部分为“www.aspxfans.com”。一个URL中，也可以使用IP地址作为域名使用	  
   (3)端口部分：跟在域名后面的是端口，域名和端口之间使用“:”作为分隔符。端口不是一个URL必须的部分，
      如果省略端口部分，将采用默认端口
   (4)虚拟目录部分：从域名后的第一个“/”开始到最后一个“/”为止，是虚拟目录部分。虚拟目录也不是一个URL必须的部分。
      本例中的虚拟目录是“/news/”	
   (5)文件名部分：从域名后的最后一个“/”开始到“？”为止
   (6)参数部分：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为
      “boardID=5&ID=24618&page=1”。参数可以允许有多个参数，参数与参数之间用“&”作为分隔符。
 
二. HTTP协议详解之请求篇
    http请求由三部分组成，分别是：请求行、消息报头、请求正文
	1. 请求行以一个方法符号开头，以空格分开，后面跟着请求的URI和协议的版本，格式如下：Method Request-URI HTTP-Version CRLF  
	   Method表示请求方法；
	   Request-URI是一个统一资源标识符；
	   HTTP-Version表示请求的HTTP协议版本；
	   CRLF表示回车和换行（除了作为结尾的CRLF外，不允许出现单独的CR或LF字符）。
	   
	2. 请求方法（所有方法全为大写）有多种，各个方法的解释如下：
	   GET     请求获取Request-URI所标识的资源
	   POST    在Request-URI所标识的资源后附加新的数据
	   HEAD    请求获取由Request-URI所标识的资源的响应消息报头
	   PUT     请求服务器存储一个资源，并用Request-URI作为其标识
	   DELETE  请求服务器删除Request-URI所标识的资源
	   TRACE   请求服务器回送收到的请求信息，主要用于测试或诊断
	   CONNECT 保留将来使用
	   OPTIONS 请求查询服务器的性能，或者查询与资源相关的选项和需求
	   
	3. 例子
       (1)GET /562f25980001b1b106000338.jpg HTTP/1.1
          Host    img.mukewang.com
          User-Agent    Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36
          Accept    image/webp,image/*,*/*;q=0.8
          Referer    http://www.imooc.com/
          Accept-Encoding    gzip, deflate, sdch
          Accept-Language    zh-CN,zh;q=0.8	
	   
	   (2)POST方法要求被请求服务器接受附在请求后面的数据，常用于提交表单。
	      POST / HTTP1.1
          Host:www.wrox.com
          User-Agent:Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)
          Content-Type:application/x-www-form-urlencoded
          Content-Length:40
          Connection: Keep-Alive
          name=Professional%20Ajax&publisher=Wiley
		  
		  第一部分：请求行，第一行明了是post请求，以及http1.1版本。
		  第二部分：请求头部，第二行至第六行。
		  第三部分：空行，第七行的空行。
          第四部分：请求数据，第八行。
		  
	   (3)HEAD方法与GET方法几乎是一样的，对于HEAD请求的回应部分来说，它的HTTP头部中包含的信息与通过GET请求所得到的信息是相同的。
	      利用这个方法，不必传输整个资源内容，就可以得到Request-URI所标识的资源的信息。该方法常用于测试超链接的有效性，
		  是否可以访问，以及最近是否更新
		  
		  
三. HTTP协议详解之响应篇
    在接收和解释请求消息后，服务器返回一个HTTP响应消息。
	HTTP响应也是由三个部分组成，分别是：状态行、消息报头、响应正文
	1. 状态行格式如下：
	   HTTP-Version Status-Code Reason-Phrase CRLF
	   其中，HTTP-Version表示服务器HTTP协议的版本；Status-Code表示服务器发回的响应状态代码；Reason-Phrase表示状态代码的文本描述。
	   状态代码有三位数字组成，第一个数字定义了响应的类别，且有五种可能取值：
	   1xx：指示信息--表示请求已接收，继续处理
	   2xx：成功--表示请求已被成功接收、理解、接受
	   3xx：重定向--要完成请求必须进行更进一步的操作
	   4xx：客户端错误--请求有语法错误或请求无法实现
       5xx：服务器端错误--服务器未能实现合法的请求
	   
	   常见状态代码、状态描述、说明：
       200 OK      //客户端请求成功
       400 Bad Request  //客户端请求有语法错误，不能被服务器所理解
       401 Unauthorized //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用 
       403 Forbidden  //服务器收到请求，但是拒绝提供服务
       404 Not Found  //请求资源不存在，eg：输入了错误的URL
       500 Internal Server Error //服务器发生不可预期的错误
       503 Server Unavailable  //服务器当前不能处理客户端的请求，一段时间后可能恢复正常
       eg：HTTP/1.1 200 OK （CRLF）
	
	2. 响应报头后述   
	3. 响应正文就是服务器返回的资源的内容 
	
四. HTTP协议详解之消息报头篇
    HTTP消息由客户端到服务器的请求和服务器到客户端的响应组成。请求消息和响应消息都是由开始行（对于请求消息，开始行就是请求行，
	对于响应消息，开始行就是状态行），消息报头（可选），空行（只有CRLF的行），消息正文（可选）组成。
	
	HTTP消息报头包括普通报头、请求报头、响应报头、实体报头。
    每一个报头域都是由名字+“：”+空格+值 组成，消息报头域的名字是大小写无关的。
	
	1、普通报头
	在普通报头中，有少数报头域用于所有的请求和响应消息，但并不用于被传输的实体，只用于传输的消息
	eg：
    Cache-Control   用于指定缓存指令，缓存指令是单向的（响应中出现的缓存指令在请求中未必会出现），且是独立的
	（一个消息的缓存指令不会影响另一个消息处理的缓存机制），HTTP1.0使用的类似的报头域为Pragma。
   请求时的缓存指令包括：no-cache（用于指示请求或响应消息不能缓存）、no-store、max-age、max-stale、min-fresh、only-if-cached;
   响应时的缓存指令包括：public、private、no-cache、no-store、no-transform、must-revalidate、proxy-revalidate、max-age、s-maxage.
   eg：为了指示IE浏览器（客户端）不要缓存页面，服务器端的JSP程序可以编写如下：response.sehHeader("Cache-Control","no-cache");
   //response.setHeader("Pragma","no-cache");作用相当于上述代码，通常两者//合用
   这句代码将在发送的响应消息中设置普通报头域：Cache-Control:no-cache
   
   2、请求报头
   请求报头允许客户端向服务器端传递请求的附加信息以及客户端自身的信息。
   常用的请求报头
   Accept
   Accept请求报头域用于指定客户端接受哪些类型的信息。
     eg：Accept：image/gif，表明客户端希望接受GIF图象格式的资源；Accept：text/html，表明客户端希望接受html文本。
   Accept-Charset
   Accept-Charset请求报头域用于指定客户端接受的字符集。
     eg：Accept-Charset:iso-8859-1,gb2312.如果在请求消息中没有设置这个域，缺省是任何字符集都可以接受。
   Accept-Encoding
   Accept-Encoding请求报头域类似于Accept，但是它是用于指定可接受的内容编码。
     eg：Accept-Encoding:gzip.deflate.如果请求消息中没有设置这个域服务器假定客户端对各种内容编码都可以接受。
   Accept-Language
   Accept-Language请求报头域类似于Accept，但是它是用于指定一种自然语言。
     eg：Accept-Language:zh-cn.如果请求消息中没有设置这个报头域，服务器假定客户端对各种语言都可以接受。
   Authorization
   Authorization请求报头域主要用于证明客户端有权查看某个资源。当浏览器访问一个页面时，如果收到服务器的响应代码为401（未授权），
   可以发送一个包含Authorization请求报头域的请求，要求服务器对其进行验证。
   Host（发送请求时，该报头域是必需的）
   Host请求报头域主要用于指定被请求资源的Internet主机和端口号，它通常从HTTP URL中提取出来的，
   eg：
   我们在浏览器中输入：http://www.guet.edu.cn/index.html
   浏览器发送的请求消息中，就会包含Host请求报头域，如下：
   Host：www.guet.edu.cn
   此处使用缺省端口号80，若指定了端口号，则变成：Host：www.guet.edu.cn:指定端口号
   
   User-Agent
   我们上网登陆论坛的时候，往往会看到一些欢迎信息，其中列出了你的操作系统的名称和版本，你所使用的浏览器的名称和版本，
   这往往让很多人感到很神奇，实际上，服务器应用程序就是从User-Agent这个请求报头域中获取到这些信息。
   User-Agent请求报头域允许客户端将它的操作系统、浏览器和其它属性告诉服务器。不过，这个报头域不是必需的，
   如果我们自己编写一个浏览器，不使用User-Agent请求报头域，那么服务器端就无法得知我们的信息了。
   
   请求报头举例：
   GET /form.html HTTP/1.1 (CRLF)
   Accept:image/gif,image/x-xbitmap,image/jpeg,application/x-shockwave-flash,application/vnd.ms-excel,application/vnd.ms-powerpoint,application/msword,*/* (CRLF)
   Accept-Language:zh-cn (CRLF)
   Accept-Encoding:gzip,deflate (CRLF)
   If-Modified-Since:Wed,05 Jan 2007 11:21:25 GMT (CRLF)
   If-None-Match:W/"80b1a4c018f3c41:8317" (CRLF)
   User-Agent:Mozilla/4.0(compatible;MSIE6.0;Windows NT 5.0) (CRLF)
   Host:www.guet.edu.cn (CRLF)
   Connection:Keep-Alive (CRLF)
   (CRLF)
   
   3. 响应报头
   响应报头允许服务器传递不能放在状态行中的附加响应信息，以及关于服务器的信息和对Request-URI所标识的资源进行下一步访问的信息。
   常用的响应报头
   Location
   Location响应报头域用于重定向接受者到一个新的位置。Location响应报头域常用在更换域名的时候。
   Server
   Server响应报头域包含了服务器用来处理请求的软件信息。与User-Agent请求报头域是相对应的。下面是Server响应报头域的一个例子：
   Server：Apache-Coyote/1.1
   WWW-Authenticate
   WWW-Authenticate响应报头域必须被包含在401（未授权的）响应消息中，客户端收到401响应消息时候，
   并发送Authorization报头域请求服务器对其进行验证时，服务端响应报头就包含该报头域。
   eg：WWW-Authenticate:Basic realm="Basic Auth Test!"  //可以看出服务器对请求资源采用的是基本验证机制。
   
   4、实体报头
   请求和响应消息都可以传送一个实体。一个实体由实体报头域和实体正文组成，但并不是说实体报头域和实体正文要在一起发送，
   可以只发送实体报头域。实体报头定义了关于实体正文（eg：有无实体正文）和请求所标识的资源的元信息。
   常用的实体报头
   Content-Encoding
   Content-Encoding实体报头域被用作媒体类型的修饰符，它的值指示了已经被应用到实体正文的附加内容的编码，
   因而要获得Content-Type报头域中所引用的媒体类型，必须采用相应的解码机制。Content-Encoding这样用于记录文档的压缩方法，
   eg：Content-Encoding：gzip
   Content-Language
   Content-Language实体报头域描述了资源所用的自然语言。没有设置该域则认为实体内容将提供给所有的语言阅读者。
   eg：Content-Language:da
   Content-Length
   Content-Length实体报头域用于指明实体正文的长度，以字节方式存储的十进制数字来表示。
   Content-Type
   Content-Type实体报头域用语指明发送给接收者的实体正文的媒体类型。
   eg：Content-Type:text/html;charset=ISO-8859-1
       Content-Type:text/html;charset=GB2312
   Last-Modified
   Last-Modified实体报头域用于指示资源的最后修改日期和时间。
   Expires
   Expires实体报头域给出响应过期的日期和时间。为了让代理服务器或浏览器在一段时间以后更新缓存中(再次访问曾访问过的页面时，
   直接从缓存中加载，缩短响应时间和降低服务器负载)的页面，我们可以使用Expires实体报头域指定页面过期的时间。 
   eg：Expires：Thu，15 Sep 2006 16:23:12 GMT
   HTTP1.1的客户端和缓存必须将其他非法的日期格式（包括0）看作已经过期
   eg：为了让浏览器不要缓存页面，我们也可以利用Expires实体报头域，设置为0，jsp中程序如下：
       response.setDateHeader("Expires","0");
	   
	   
4. HTTP协议Content Lenth限制漏洞导致拒绝服务攻击	
   使用POST方法时，可以设置ContentLenth来定义需要传送的数据长度
   ContentLenth:999999999，在传送完成前，内 存不会释放，攻击者可以利用这个缺陷，
   连续向WEB服务器发送垃圾数据直至WEB服务器内存耗尽。这种攻击方法基本不会留下痕迹。   
   
  
5. Cache-Control指定请求和响应遵循的缓存机制。在请求消息或响应消息中设置Cache-Control
   并不会修改另一个消息处理过程中的缓存处理过程  
   (1)请求时的缓存指令包括：no-cache（用于指示请求或响应消息不能缓存）
      no-store、max-age、max-stale、min-fresh、only-if-cached;
   (2)响应时的缓存指令包括：public、private、no-cache、no-store、no-transform、
      must-revalidate、proxy-revalidate、max-age、s-maxage.
	Cache-Control指定了请求和响应遵循的缓存机制。好的缓存机制可以减少对网络带宽的占用，
	可以提高访问速度，提高用户的体验，还可以减轻服务器的负担。
    请求Request：  
      no-cache  ---- 不要读取缓存中的文件，要求向WEB服务器重新请求
      no-store  ---- 请求和响应都禁止被缓存
      max-age： ---- 表示当访问此网页后的max-age秒内再次访问不会去服务器请求，其功能与Expires类似，
	               只是Expires是根据某个特定日期值做比较。一但缓存者自身的时间不准确.则结果可能
				   就是错误的，而max-age,显然无此问题.。Max-age的优先级也是高于Expires的。
      max-stale  ---- 允许读取过期时间必须小于max-stale 值的缓存对象	
      min-fresh ---- 接受其max-age生命期大于其当前时间 跟 min-fresh 值之和的缓存对象
      only-if-cached ---- 告知缓存者,我希望内容来自缓存，我并不关心被缓存响应,是否是新鲜的.
      no-transform   ---- 告知代理,不要更改媒体类型,比如jpg,被你改成png.
   
    响应Response
      public    ---- 数据内容皆被储存起来，就连有密码保护的网页也储存，安全性很低 
      private    ---- 数据内容只能被储存到私有的cache，仅对某个用户有效，不能共享
      no-cache    ---- 可以缓存，但是只有在跟WEB服务器验证了其有效后，才能返回给客户端
      no-store  ---- 请求和响应都禁止被缓存
      max-age：   ----- 本响应包含的对象的过期时间
      Must-revalidate    ---- 如果缓存过期了，会再次和原来的服务器确定是否为最新数据，而不是和中间的proxy
      no-transform   ---- 告知代理,不要更改媒体类型,比如jpg,被你改成png.	  
   
      
   	
	  
6. Date头域表示消息发送的时间，时间的描述格式由rfc822定义。例如，Date:Mon,31Dec200104:25:57GMT。
   Date描述的时间表示世界标准时，换算成本地时间，需要知道用户所在的时区。	  

7. POST方法适用于需要客户填写表单的场合。与请求数据相关的最常使用的请求头是Content-Type和Content-Length。

8. HTTP协议没有对传输的数据大小进行限制，HTTP协议规范也没有对URL长度进行限制。 而在实际开发中存在的限制主要有：
   GET:特定浏览器和服务器对URL长度有限制，例如IE对URL长度的限制是2083字节(2K+35)。
       对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系统的支持。
   
   POST:由于不是通过URL传值，理论上数据不受限。但实际各个WEB服务器会规定对post提交数据大小进行限制，Apache、IIS6都有各自的配置。
   
9. 安全性：
   POST的安全性要比GET的安全性高。注意：这里所说的安全性和上面GET提到的“安全”不是同个概念。上面“安全”的含义仅仅
   是不作数据修改，而这里安全的含义是真正的Security的含义，比如：通过GET提交数据，用户名和密码将明文出现在URL上，
   因为(1)登录页面有可能被浏览器缓存， (2)其他人查看浏览器的历史纪录，那么别人就可以拿到你的账号和密码了
   
10. Last-Modified/If-Modified-Since
    有些数据随时都在变化。 CNN.com 的主页经常几分钟就更新。另一方面，Google.com 的主页几个星期才更新一次 
	(当他们上传特殊的假日 logo，或为一个新服务作广告时)。 Web 服务是不变的：通常服务器知道你所请求的数据的最后修改时间，
	并且 HTTP 为服务器提供了一种将最近修改数据连同你请求的数据一同发送的方法。
	
	如果你第二次 (或第三次，或第四次) 请求相同的数据，你可以告诉服务器你上一次获得的最后修改日期：
	  在你的请求中发送一个 If-Modified-Since 头信息，它包含了上一次从服务器连同数据所获得的日期。如果数据从那时起没有改变，
	  服务器将返回一个特殊的 HTTP 状态代码 304，这意味着 “从上一次请求后这个数据没有改变”。
	服务器发送状态编码 304 时，不再重新发送数据。您仅仅获得了这个状态代码。所以当数据没有更新时，
	你不需要一次又一次地下载相同的数据；服务器假定你有本地的缓存数据。

11. ETag/If-None-Match
    ETag 是实现与最近修改数据检查同样的功能的另一种方法：没有变化时不重新下载数据。其工作方式是：
      服务器发送你所请求的数据的同时，发送某种数据的 hash (在 ETag 头信息中给出)。hash 的确定完全取决于服务器。
      当第二次请求相同的数据时，你需要在 If-None-Match: 头信息中包含 ETag hash，如果数据没有改变，服务器将返回 
	  304 状态代码。与最近修改数据检查相同，服务器仅仅 发送 304 状态代码；第二次将不为你发送相同的数据。在第二次请求时，
	  通过包含 ETag hash，你告诉服务器：如果 hash 仍旧匹配就没有必要重新发送相同的数据，因为你还有上一次访问过的数据。	

12. 1.通用头标：即可用于请求，也可用于响应，是作为一个整体而不是特定资源与事务相关联。
    2.请求头标：允许客户端传递关于自身的信息和希望的响应形式。
    3.响应头标：服务器和于传递自身信息的响应。
    4.实体头标：定义被传送资源的信息。即可用于请求，也可用于响应。	
    Accept ---- 定义客户端可以处 理的媒体类型，按优先级排序；在一个以逗号为分隔的列表中，
	            可以定义多种类型和使用通配符。例如：Accept: image/jpeg,image/png,*/*	
    Accept-Charset ---- 定义客户端可以处理的字符集，按优先级排序；在一个以逗号为分隔的列表中，
	                    可以定义多种类型和使用通配符。例如：Accept-Charset: iso- 8859-1,*,utf-8
    Accept-Encoding ---- 定义客户端可以理解的编码机制。例如：Accept-Encoding:gzip,compress	
    Accept-Language ---- 定义客户端乐于接受的自然语言列表。例如：Accept-Language: en,de
	Age ---- 允许服务器规定自服务器 生成该响应以来所经过的时间长度，以秒为单位。该头标主要用于缓存响应。
	         例如：Age: 30
    Allow ---- 一个响应头标，它定义一个由位于请求URI中的次源所支持的HTTP方法列表。例如：Allow: GET,PUT
	Connection ---- 一 个用于表明是否保存socket连接为开放的通用头标。例如：Connection: close或Connection: keep-alive
	Content-Encoding ---- 一 种介质类型修饰符，标明一个实体是如何编码的。例如：Content-Encoding: zip
	Content-Language ---- 用于指定在输入流中数据的自然语言类型。例如：Content-Language: en
	Content-Length ---- 指定包含于请求或响应中数据的字节长度。例如：Content-Length:382
	Content-Location ---- 指定包含于请求或响应中的资源定位（URI）。例如：Content-Location: http://www.myweb.com/news
	Host ---- 被请求资源的主机名。对于使用HTTP/1.1的请求而言，此域是强制性的。例 如：Host: www.myweb.com
	If-Modified-Since ---- 如果包含了GET请求，导致该请求条件性地依赖于资源上次修改日期。如果出现了此头标，
	                       并且自指定日期以来，此资源已被修改，应该反回一个304响应代码。
						   例如：If-Modified-Since: Mon,10PR 18:42:51 GMT  
	Refener ---- 一种请求头标域，标明产生请求的初始资源。对于HTML表单，它包含此表单的Web页面的地址。
                 例如：Refener: http://www.myweb.com/news/search.html
	

	
			 
	
   

   	   

  请求报文	   
  GET /search?hl=zh-CN&source=hp&q=domety&aq=f&oq= HTTP/1.1  
  Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/vnd.ms-excel, application/vnd.ms-powerpoint, 
  application/msword, application/x-silverlight, application/x-shockwave-flash, */*  
  Referer: <a href="http://www.google.cn/">http://www.google.cn/</a>  
  Accept-Language: zh-cn  
  Accept-Encoding: gzip, deflate  
  User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; TheWorld)  
  Host: <a href="http://www.google.cn">www.google.cn</a>  
  Connection: Keep-Alive  
  Cookie: PREF=ID=80a06da87be9ae3c:U=f7167333e2c3b714:NW=1:TM=1261551909:LM=1261551917:S=ybYcq2wpfefs4V9g; 
  NID=31=ojj8d-IygaEtSxLgaJmqSjVhCspkviJrB6omjamNrSm8lZhKy_yMfO2M4QMRKcH1g0iQv9u-2hfBW7bUFwVh7pGaRUb0RnHcJU37y-
  FxlRugatx63JLv7CWMD6UB_O_r 	


  POST /search HTTP/1.1  
  Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/vnd.ms-excel, application/vnd.ms-powerpoint, 
  application/msword, application/x-silverlight, application/x-shockwave-flash, */*  
  Referer: <a href="http://www.google.cn/">http://www.google.cn/</a>  
  Accept-Language: zh-cn  
  Accept-Encoding: gzip, deflate  
  User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; TheWorld)  
  Host: <a href="http://www.google.cn">www.google.cn</a>  
  Connection: Keep-Alive  
  Cookie: PREF=ID=80a06da87be9ae3c:U=f7167333e2c3b714:NW=1:TM=1261551909:LM=1261551917:S=ybYcq2wpfefs4V9g; 
  NID=31=ojj8d-IygaEtSxLgaJmqSjVhCspkviJrB6omjamNrSm8lZhKy_yMfO2M4QMRKcH1g0iQv9u-2hfBW7bUFwVh7pGaRUb0RnHcJU37y-
  FxlRugatx63JLv7CWMD6UB_O_r

  响应报文
  HTTP/1.1 200 OK
  Date: Sat, 31 Dec 2005 23:59:59 GMT
  Content-Type: text/html;charset=ISO-8859-1
  Content-Length: 122  
   
   
   
   
	
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
   
   
   
      